{"version":3,"sources":["constants.js","components/ComestibleEntry.js","components/ComestibleList.js","App.js","reportWebVitals.js","index.js"],"names":["SERVER_URL","ComestibleEntry","props","useState","item","setItem","id","type","name","onChange","event","target","value","onClick","addItem","ComestibleList","isToggled","deleteItem","val","fetch","method","headers","then","res","fetchItems","catch","err","console","error","toggleOnDelete","state","data","loading","bind","this","resp","json","respData","log","setState","body","JSON","stringify","tableRows","map","index","className","toggleTitleColor","face","src","align","element","document","getElementById","style","color","Math","floor","random","background","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"wPACaA,EAAa,4C,OCsBXC,EApBS,SAACC,GACxB,MAAuBC,mBAAS,IAAhC,mBAAOC,EAAP,KAAYC,EAAZ,KAWA,OACC,gCACA,uBAAOC,GAAG,UAAUC,KAAK,OAAOC,KAAK,OAAOC,SAXxB,SAACC,GACrBL,EAAQK,EAAMC,OAAOC,QAU+CA,MAAOR,IAC3E,wBAAQG,KAAK,SAASM,QARJ,SAACH,GACnBR,EAAMY,QAAQV,GACdC,EAAQ,KAMR,qBCoFaU,E,kDA/Fb,WAAYb,GAAO,IAAD,8BAChB,cAAMA,IAFRc,WAAY,EACM,EAsClBC,WAAa,SAACC,GACZC,MAAMnB,EAAa,mBAAqBkB,EACtC,CAACE,OAAO,SACRC,QAAQ,CACN,eAAgB,sBAGnBC,MAAK,SAAAC,GAAG,OAAI,EAAKC,gBACjBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,MAC5B,EAAKG,kBA7CL,EAAKC,MAAQ,CAAEC,KAAK,GAAIC,SAAS,GAEjC,EAAKlB,QAAU,EAAKA,QAAQmB,KAAb,gBACf,EAAKhB,WAAa,EAAKA,WAAWgB,KAAhB,gBALF,E,qDAQlB,WACEC,KAAKV,e,wBAGP,WAAa,IAAD,OAEVL,MADYnB,wDAEXsB,MAAK,SAACa,GAAD,OAAUA,EAAKC,UACpBd,MAAK,SAACe,GACLV,QAAQW,IAAID,GACZ,EAAKE,SAAS,CACZR,KAAMM,EACNL,SAAS,OAGZP,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,Q,qBAG9B,SAAQtB,GAAM,IAAD,OACXe,MAAMnB,EAAa,kBACjB,CAACoB,OAAO,OACRC,QAAQ,CACN,eAAgB,oBAElBmB,KAAMC,KAAKC,UAAUtC,KAEtBkB,MAAM,SAAAC,GAAG,OAAI,EAAKC,gBAClBC,OAAM,SAAAC,GAAG,OAAIC,QAAQC,MAAMF,Q,oBAe9B,WAAS,IAAD,OACAiB,EAAYT,KAAKJ,MAAMC,KAAKa,KAAI,SAACxC,EAAKyC,GAAN,OACpC,6BACE,oBAAIhC,QAAU,WAAM,EAAKI,WAAWb,EAAKE,KAAzC,SAAiDF,EAAKA,QAD/CyC,MAIX,OACE,sBAAKC,UAAU,MAAf,UACE,oBAAIxC,GAAG,WAAWO,QAAS,WAAK,EAAKkC,oBAArC,SACN,sBAAMC,KAAK,gBAAX,2BAEI,cAAC,EAAD,CAAiBlC,QAASoB,KAAKpB,QAASU,WAAYU,KAAKV,aAEtDU,KAAKJ,MAAME,QACV,4BAAG,qBAAKiB,IAAI,kBAEZ,uBAAOC,MAAM,SAAb,SAAsB,gCAAQP,W,8BAOtC,WACE,IAAIQ,EAAUC,SAASC,eAAe,aAChB,IAAnBnB,KAAKlB,WACNmC,EAAQG,MAAMC,MAAQ,MACtBrB,KAAKlB,WAAY,IAGjBmC,EAAQG,MAAMC,MAAQ,QACtBrB,KAAKlB,WAAY,K,4BAIrB,WACsC,IAAjCwC,KAAKC,MAAoB,GAAdD,KAAKE,UACjBN,SAASZ,KAAKc,MAAMK,WAAa,SAGjCP,SAASZ,KAAKc,MAAMK,WAAa,Y,GA7FVC,aCOdC,MARf,WACE,OACE,qBAAKf,UAAU,MAAf,SACE,cAAC,EAAD,OCMSgB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1C,MAAK,YAAkD,IAA/C2C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpB,SAASC,eAAe,SAM1BS,M","file":"static/js/main.6a1d1f61.chunk.js","sourcesContent":["//export const SERVER_URL = 'https://intense-dawn-40105.herokuapp.com/api/comestibles';\r\nexport const SERVER_URL = 'https://intense-dawn-40105.herokuapp.com/';\r\n","import React, {useState} from 'react';\r\nimport {SERVER_URL} from '../constants.js';\r\n\r\nconst ComestibleEntry = (props) => {\r\n\tconst [item,setItem] = useState([]);\r\n\r\n\tconst inputChanged = (event) => {\r\n\t\tsetItem(event.target.value);\r\n\t}\r\n\r\n\tconst handleSave = (event) => {\r\n\t\tprops.addItem(item);\r\n\t\tsetItem(\"\");\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t<input id=\"newItem\" type=\"text\" name=\"item\" onChange={inputChanged} value={item}/>\r\n\t\t<button type=\"button\" onClick={handleSave}>Add</button>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default ComestibleEntry;\r\n","import React, {Component} from 'react';\r\nimport ComestibleEntry from './ComestibleEntry';\r\nimport {SERVER_URL} from '../constants.js';\r\n\r\nclass ComestibleList extends Component{\r\n\r\n  isToggled = false;\r\n  constructor(props){\r\n    super(props);\r\n    this.state = { data:[], loading: true };\r\n    // below bindings necessary for setState function to work on item entry, deletion\r\n    this.addItem = this.addItem.bind(this);\r\n    this.deleteItem = this.deleteItem.bind(this);\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.fetchItems();\r\n  }\r\n\r\n  fetchItems(){\r\n    const url = SERVER_URL + 'comestibles';\r\n    fetch(url)\r\n    .then((resp) => resp.json())\r\n    .then((respData) => {\r\n      console.log(respData);\r\n      this.setState({\r\n        data: respData,\r\n        loading: false\r\n      });\r\n    })\r\n    .catch(err => console.error(err));\r\n  }\r\n\r\n  addItem(item){\r\n    fetch(SERVER_URL + 'api/comestibles',\r\n      {method:'POST',\r\n      headers:{\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(item)\r\n    })\r\n    .then( res => this.fetchItems())\r\n    .catch(err => console.error(err));\r\n  }\r\n\r\n  deleteItem = (val) => {\r\n    fetch(SERVER_URL + 'api/comestibles/' + val,\r\n      {method:'DELETE',\r\n      headers:{\r\n        'Content-Type': 'application/json'\r\n      },\r\n    })\r\n    .then(res => this.fetchItems())\r\n    .catch(err => console.error(err));\r\n    this.toggleOnDelete();\r\n  }\r\n\r\n  render(){\r\n    const tableRows = this.state.data.map((item,index) =>\r\n      <tr key={index}>\r\n        <td onClick={ ()=>{ this.deleteItem(item.id) }}>{item.item}</td>\r\n      </tr>\r\n    );\r\n    return(\r\n      <div className=\"App\">\r\n        <h1 id=\"comTitle\" onClick={()=>{this.toggleTitleColor()}}>\n\t\t<font face=\"Comic sans MS\">comestibles</font>\n\t</h1>\r\n      <ComestibleEntry addItem={this.addItem} fetchItems={this.fetchItems} />\r\n\r\n        {this.state.loading ?\r\n        ( <p><img src=\"spinner.svg\"/></p> )\r\n        :\r\n        ( <table align=\"center\"><tbody>{tableRows}</tbody></table> )\r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  toggleTitleColor(){\r\n    var element = document.getElementById('comTitle');\r\n    if(this.isToggled === false){\r\n      element.style.color = \"red\";\r\n      this.isToggled = true;\r\n    }\r\n    else{\r\n      element.style.color = \"green\";\r\n      this.isToggled = false;\r\n    }\r\n  }\r\n\r\n  toggleOnDelete(){\r\n    if(Math.floor(Math.random()*20) === 2){\r\n      document.body.style.background = \"yellow\";\r\n    }\r\n    else{\r\n      document.body.style.background = \"white\";\r\n    }\r\n  }\r\n\r\n}\r\nexport default ComestibleList;\r\n","import './App.css';\nimport ComestibleList from './components/ComestibleList';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ComestibleList />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}